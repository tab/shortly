// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: shortly.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	URLShortener_CreateShortLinkV1_FullMethodName       = "/shortly.v1.URLShortener/CreateShortLinkV1"
	URLShortener_GetShortLinkV1_FullMethodName          = "/shortly.v1.URLShortener/GetShortLinkV1"
	URLShortener_BatchCreateShortLinksV1_FullMethodName = "/shortly.v1.URLShortener/BatchCreateShortLinksV1"
	URLShortener_GetUserURLsV1_FullMethodName           = "/shortly.v1.URLShortener/GetUserURLsV1"
	URLShortener_DeleteUserURLsV1_FullMethodName        = "/shortly.v1.URLShortener/DeleteUserURLsV1"
)

// URLShortenerClient is the client API for URLShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// URLShortener service
type URLShortenerClient interface {
	// CreateShortLinkV1 creates a short link for the given URL
	CreateShortLinkV1(ctx context.Context, in *CreateShortLinkV1Request, opts ...grpc.CallOption) (*CreateShortLinkV1Response, error)
	// GetShortLinkV1 returns the original URL for the given shortCode
	GetShortLinkV1(ctx context.Context, in *GetShortLinkV1Request, opts ...grpc.CallOption) (*GetShortLinkV1Response, error)
	// BatchCreateShortLinksV1 creates short links for the given URLs
	BatchCreateShortLinksV1(ctx context.Context, in *BatchCreateShortLinksV1Request, opts ...grpc.CallOption) (*BatchCreateShortLinksV1Response, error)
	// GetUserURLsV1 returns the list of short URLs created by the user
	GetUserURLsV1(ctx context.Context, in *GetUserURLsV1Request, opts ...grpc.CallOption) (*GetUserURLsV1Response, error)
	// DeleteUserURLsV1 deletes the short URLs created by the user
	DeleteUserURLsV1(ctx context.Context, in *DeleteUserURLsV1Request, opts ...grpc.CallOption) (*DeleteUserURLsV1Response, error)
}

type uRLShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerClient(cc grpc.ClientConnInterface) URLShortenerClient {
	return &uRLShortenerClient{cc}
}

func (c *uRLShortenerClient) CreateShortLinkV1(ctx context.Context, in *CreateShortLinkV1Request, opts ...grpc.CallOption) (*CreateShortLinkV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortLinkV1Response)
	err := c.cc.Invoke(ctx, URLShortener_CreateShortLinkV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) GetShortLinkV1(ctx context.Context, in *GetShortLinkV1Request, opts ...grpc.CallOption) (*GetShortLinkV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShortLinkV1Response)
	err := c.cc.Invoke(ctx, URLShortener_GetShortLinkV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) BatchCreateShortLinksV1(ctx context.Context, in *BatchCreateShortLinksV1Request, opts ...grpc.CallOption) (*BatchCreateShortLinksV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateShortLinksV1Response)
	err := c.cc.Invoke(ctx, URLShortener_BatchCreateShortLinksV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) GetUserURLsV1(ctx context.Context, in *GetUserURLsV1Request, opts ...grpc.CallOption) (*GetUserURLsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserURLsV1Response)
	err := c.cc.Invoke(ctx, URLShortener_GetUserURLsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerClient) DeleteUserURLsV1(ctx context.Context, in *DeleteUserURLsV1Request, opts ...grpc.CallOption) (*DeleteUserURLsV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserURLsV1Response)
	err := c.cc.Invoke(ctx, URLShortener_DeleteUserURLsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortenerServer is the server API for URLShortener service.
// All implementations must embed UnimplementedURLShortenerServer
// for forward compatibility.
//
// URLShortener service
type URLShortenerServer interface {
	// CreateShortLinkV1 creates a short link for the given URL
	CreateShortLinkV1(context.Context, *CreateShortLinkV1Request) (*CreateShortLinkV1Response, error)
	// GetShortLinkV1 returns the original URL for the given shortCode
	GetShortLinkV1(context.Context, *GetShortLinkV1Request) (*GetShortLinkV1Response, error)
	// BatchCreateShortLinksV1 creates short links for the given URLs
	BatchCreateShortLinksV1(context.Context, *BatchCreateShortLinksV1Request) (*BatchCreateShortLinksV1Response, error)
	// GetUserURLsV1 returns the list of short URLs created by the user
	GetUserURLsV1(context.Context, *GetUserURLsV1Request) (*GetUserURLsV1Response, error)
	// DeleteUserURLsV1 deletes the short URLs created by the user
	DeleteUserURLsV1(context.Context, *DeleteUserURLsV1Request) (*DeleteUserURLsV1Response, error)
	mustEmbedUnimplementedURLShortenerServer()
}

// UnimplementedURLShortenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedURLShortenerServer struct{}

func (UnimplementedURLShortenerServer) CreateShortLinkV1(context.Context, *CreateShortLinkV1Request) (*CreateShortLinkV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortLinkV1 not implemented")
}
func (UnimplementedURLShortenerServer) GetShortLinkV1(context.Context, *GetShortLinkV1Request) (*GetShortLinkV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortLinkV1 not implemented")
}
func (UnimplementedURLShortenerServer) BatchCreateShortLinksV1(context.Context, *BatchCreateShortLinksV1Request) (*BatchCreateShortLinksV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateShortLinksV1 not implemented")
}
func (UnimplementedURLShortenerServer) GetUserURLsV1(context.Context, *GetUserURLsV1Request) (*GetUserURLsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLsV1 not implemented")
}
func (UnimplementedURLShortenerServer) DeleteUserURLsV1(context.Context, *DeleteUserURLsV1Request) (*DeleteUserURLsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLsV1 not implemented")
}
func (UnimplementedURLShortenerServer) mustEmbedUnimplementedURLShortenerServer() {}
func (UnimplementedURLShortenerServer) testEmbeddedByValue()                      {}

// UnsafeURLShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerServer will
// result in compilation errors.
type UnsafeURLShortenerServer interface {
	mustEmbedUnimplementedURLShortenerServer()
}

func RegisterURLShortenerServer(s grpc.ServiceRegistrar, srv URLShortenerServer) {
	// If the following call pancis, it indicates UnimplementedURLShortenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&URLShortener_ServiceDesc, srv)
}

func _URLShortener_CreateShortLinkV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortLinkV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).CreateShortLinkV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_CreateShortLinkV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).CreateShortLinkV1(ctx, req.(*CreateShortLinkV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_GetShortLinkV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortLinkV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).GetShortLinkV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_GetShortLinkV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).GetShortLinkV1(ctx, req.(*GetShortLinkV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_BatchCreateShortLinksV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateShortLinksV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).BatchCreateShortLinksV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_BatchCreateShortLinksV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).BatchCreateShortLinksV1(ctx, req.(*BatchCreateShortLinksV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_GetUserURLsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserURLsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).GetUserURLsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_GetUserURLsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).GetUserURLsV1(ctx, req.(*GetUserURLsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortener_DeleteUserURLsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServer).DeleteUserURLsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortener_DeleteUserURLsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServer).DeleteUserURLsV1(ctx, req.(*DeleteUserURLsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortener_ServiceDesc is the grpc.ServiceDesc for URLShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortly.v1.URLShortener",
	HandlerType: (*URLShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortLinkV1",
			Handler:    _URLShortener_CreateShortLinkV1_Handler,
		},
		{
			MethodName: "GetShortLinkV1",
			Handler:    _URLShortener_GetShortLinkV1_Handler,
		},
		{
			MethodName: "BatchCreateShortLinksV1",
			Handler:    _URLShortener_BatchCreateShortLinksV1_Handler,
		},
		{
			MethodName: "GetUserURLsV1",
			Handler:    _URLShortener_GetUserURLsV1_Handler,
		},
		{
			MethodName: "DeleteUserURLsV1",
			Handler:    _URLShortener_DeleteUserURLsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortly.proto",
}
