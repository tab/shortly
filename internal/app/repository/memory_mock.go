// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/memory.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/memory.go -destination=internal/app/repository/memory_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInMemory is a mock of InMemory interface.
type MockInMemory struct {
	ctrl     *gomock.Controller
	recorder *MockInMemoryMockRecorder
	isgomock struct{}
}

// MockInMemoryMockRecorder is the mock recorder for MockInMemory.
type MockInMemoryMockRecorder struct {
	mock *MockInMemory
}

// NewMockInMemory creates a new mock instance.
func NewMockInMemory(ctrl *gomock.Controller) *MockInMemory {
	mock := &MockInMemory{ctrl: ctrl}
	mock.recorder = &MockInMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInMemory) EXPECT() *MockInMemoryMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockInMemory) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockInMemoryMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockInMemory)(nil).Clear))
}

// CreateMemento mocks base method.
func (m *MockInMemory) CreateMemento() *Memento {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemento")
	ret0, _ := ret[0].(*Memento)
	return ret0
}

// CreateMemento indicates an expected call of CreateMemento.
func (mr *MockInMemoryMockRecorder) CreateMemento() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemento", reflect.TypeOf((*MockInMemory)(nil).CreateMemento))
}

// CreateURL mocks base method.
func (m *MockInMemory) CreateURL(ctx context.Context, url URL) (*URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", ctx, url)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockInMemoryMockRecorder) CreateURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockInMemory)(nil).CreateURL), ctx, url)
}

// CreateURLs mocks base method.
func (m *MockInMemory) CreateURLs(ctx context.Context, urls []URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLs", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURLs indicates an expected call of CreateURLs.
func (mr *MockInMemoryMockRecorder) CreateURLs(ctx, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLs", reflect.TypeOf((*MockInMemory)(nil).CreateURLs), ctx, urls)
}

// GetURLByShortCode mocks base method.
func (m *MockInMemory) GetURLByShortCode(ctx context.Context, shortCode string) (*URL, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetURLByShortCode indicates an expected call of GetURLByShortCode.
func (mr *MockInMemoryMockRecorder) GetURLByShortCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShortCode", reflect.TypeOf((*MockInMemory)(nil).GetURLByShortCode), ctx, shortCode)
}

// GetURLsByUserID mocks base method.
func (m *MockInMemory) GetURLsByUserID(ctx context.Context, uuid uuid.UUID, limit, offset int64) ([]URL, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, uuid, limit, offset)
	ret0, _ := ret[0].([]URL)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockInMemoryMockRecorder) GetURLsByUserID(ctx, uuid, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockInMemory)(nil).GetURLsByUserID), ctx, uuid, limit, offset)
}

// Restore mocks base method.
func (m_2 *MockInMemory) Restore(m *Memento) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "Restore", m)
}

// Restore indicates an expected call of Restore.
func (mr *MockInMemoryMockRecorder) Restore(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockInMemory)(nil).Restore), m)
}
