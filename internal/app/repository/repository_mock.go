// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/repository.go -destination=internal/app/repository/repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMemento mocks base method.
func (m *MockRepository) CreateMemento() *Memento {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemento")
	ret0, _ := ret[0].(*Memento)
	return ret0
}

// CreateMemento indicates an expected call of CreateMemento.
func (mr *MockRepositoryMockRecorder) CreateMemento() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemento", reflect.TypeOf((*MockRepository)(nil).CreateMemento))
}

// GetURLByShortCode mocks base method.
func (m *MockRepository) GetURLByShortCode(ctx context.Context, shortCode string) (*URL, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShortCode", shortCode)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetURLByShortCode indicates an expected call of GetURLByShortCode.
func (mr *MockRepositoryMockRecorder) GetURLByShortCode(ctx context.Context, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShortCode", reflect.TypeOf((*MockRepository)(nil).GetURLByShortCode), shortCode)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// Restore mocks base method.
func (mr *MockRepository) Restore(m *Memento) {
	mr.ctrl.T.Helper()
	mr.ctrl.Call(mr, "Restore", m)
}

// Restore indicates an expected call of Restore.
func (mr *MockRepositoryMockRecorder) Restore(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockRepository)(nil).Restore), m)
}

// CreateURL mocks base method.
func (m *MockRepository) CreateURL(ctx context.Context, url URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockRepositoryMockRecorder) CreateURL(ctx context.Context, url URL) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockRepository)(nil).CreateURL), url)
}

// CreateURLs mocks base method.
func (m *MockRepository) CreateURLs(ctx context.Context, urls []URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLs", urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURLs indicates an expected call of CreateURLs.
func (mr *MockRepositoryMockRecorder) CreateURLs(ctx context.Context, urls []URL) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLs", reflect.TypeOf((*MockRepository)(nil).CreateURLs), urls)
}

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockBuilder) CreateRepository(ctx context.Context) (Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx)
	ret0, _ := ret[0].(Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockBuilderMockRecorder) CreateRepository(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockBuilder)(nil).CreateRepository), ctx)
}
