// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/health.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/persistence/persistence.go -destination=internal/app/repository/persistence/persistence_mock.go -package=persistence
//

// Package persistence is a generated GoMock package.
package persistence

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

type MockManagerMockRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

func (m *MockManager) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockManagerMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockManager)(nil).Load))
}

func (m *MockManager) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockManagerMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockManager)(nil).Save))
}
