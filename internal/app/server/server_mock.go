// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/health.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/server/server.go -destination=internal/app/server/server_mock.go -package=server
//

// Package server is a generated GoMock package.
package server

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"
)

type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

type MockServerMockRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

func (m *MockServer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockServer)(nil).Run))
}

func (m *MockServer) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockServerMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServer)(nil).Shutdown), ctx)
}
