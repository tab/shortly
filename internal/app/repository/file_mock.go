// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/file.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/file.go -destination=internal/app/repository/file_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (mr *MockFileRepository) Load() (*Memento, error) {
	mr.ctrl.T.Helper()
	ret := mr.ctrl.Call(mr, "Load")
	ret0, _ := ret[0].(*Memento)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockFileRepositoryMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockFileRepository)(nil).Load))
}

// Save mocks base method.
func (mr *MockFileRepository) Save(m *Memento) error {
	mr.ctrl.T.Helper()
	ret := mr.ctrl.Call(mr, "Save", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileRepositoryMockRecorder) Save(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileRepository)(nil).Save), snapshot)
}
