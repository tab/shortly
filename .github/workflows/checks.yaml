name: Checks
on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  push:
    branches:
      - main
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true
jobs:
  analyzer:
    name: Code analyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
      - name: Build statictest
        run: |
          git clone -b v0.11.4 https://github.com/Yandex-Practicum/go-autotests.git /tmp/go-autotests
          cd /tmp/go-autotests/cmd/statictest
          go build -o /usr/local/bin/statictest
      - name: Run statictest
        run: |
          go vet -vettool=$(which statictest) ./...

  linter:
    name: Golang CI
    needs: analyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64

  buf-linter:
    name: Buf linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bufbuild/buf-action@v1
        with:
          setup_only: true
      - name: Run buf lint
        run: buf lint

  coverage:
    name: Codecov
    env:
      GO_ENV: test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shortly-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
      - name: Load schema.sql
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d shortly-test -f db/schema.sql
      - name: Run tests
        run: go test ./... -race -coverprofile=coverage.out -covermode=atomic
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
