// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (uuid, long_url, short_code, user_uuid)
VALUES ($1, $2, $3, $4)
ON CONFLICT (long_url) DO UPDATE SET short_code = urls.short_code
RETURNING uuid, long_url, short_code
`

type CreateURLParams struct {
	UUID      uuid.UUID
	LongURL   string
	ShortCode string
	UserUUID  uuid.UUID
}

type CreateURLRow struct {
	UUID      uuid.UUID
	LongURL   string
	ShortCode string
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRow(ctx, createURL,
		arg.UUID,
		arg.LongURL,
		arg.ShortCode,
		arg.UserUUID,
	)
	var i CreateURLRow
	err := row.Scan(&i.UUID, &i.LongURL, &i.ShortCode)
	return i, err
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT uuid, long_url, short_code FROM urls WHERE short_code = $1
`

type GetURLByShortCodeRow struct {
	UUID      uuid.UUID
	LongURL   string
	ShortCode string
}

func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode string) (GetURLByShortCodeRow, error) {
	row := q.db.QueryRow(ctx, getURLByShortCode, shortCode)
	var i GetURLByShortCodeRow
	err := row.Scan(&i.UUID, &i.LongURL, &i.ShortCode)
	return i, err
}

const getURLsByUserID = `-- name: GetURLsByUserID :many
SELECT uuid, long_url, short_code FROM urls WHERE user_uuid = $1
`

type GetURLsByUserIDRow struct {
	UUID      uuid.UUID
	LongURL   string
	ShortCode string
}

func (q *Queries) GetURLsByUserID(ctx context.Context, id uuid.UUID) ([]GetURLsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getURLsByUserID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetURLsByUserIDRow
	for rows.Next() {
		var i GetURLsByUserIDRow
		if err := rows.Scan(&i.UUID, &i.LongURL, &i.ShortCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const healthCheck = `-- name: HealthCheck :one
SELECT 1
`

func (q *Queries) HealthCheck(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, healthCheck)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
