// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/repository.go -destination=internal/app/repository/mock_repository.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockURLRepository) Get(shortCode string) (*URL, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", shortCode)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLRepositoryMockRecorder) Get(shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLRepository)(nil).Get), shortCode)
}

// Set mocks base method.
func (m *MockURLRepository) Set(url URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockURLRepositoryMockRecorder) Set(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockURLRepository)(nil).Set), url)
}
