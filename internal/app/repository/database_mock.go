// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/database.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/database.go -destination=internal/app/repository/database_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// CreateURL mocks base method.
func (m *MockDatabase) CreateURL(ctx context.Context, url URL) (*URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", ctx, url)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockDatabaseMockRecorder) CreateURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockDatabase)(nil).CreateURL), ctx, url)
}

// CreateURLs mocks base method.
func (m *MockDatabase) CreateURLs(ctx context.Context, urls []URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLs", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURLs indicates an expected call of CreateURLs.
func (mr *MockDatabaseMockRecorder) CreateURLs(ctx, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLs", reflect.TypeOf((*MockDatabase)(nil).CreateURLs), ctx, urls)
}

// GetURLByShortCode mocks base method.
func (m *MockDatabase) GetURLByShortCode(ctx context.Context, shortCode string) (*URL, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShortCode", ctx, shortCode)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetURLByShortCode indicates an expected call of GetURLByShortCode.
func (mr *MockDatabaseMockRecorder) GetURLByShortCode(ctx, shortCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShortCode", reflect.TypeOf((*MockDatabase)(nil).GetURLByShortCode), ctx, shortCode)
}

// GetURLsByUserID mocks base method.
func (m *MockDatabase) GetURLsByUserID(ctx context.Context, uuid uuid.UUID) ([]URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, uuid)
	ret0, _ := ret[0].([]URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockDatabaseMockRecorder) GetURLsByUserID(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockDatabase)(nil).GetURLsByUserID), ctx, uuid)
}

// Ping mocks base method.
func (m *MockDatabase) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping), ctx)
}
