// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/secure_random.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/secure_random.go -destination=internal/app/service/secure_random_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	"github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSecureRandomGenerator is a mock of SecureRandomGenerator interface.
type MockSecureRandomGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockSecureRandomGeneratorMockRecorder
	isgomock struct{}
}

// MockSecureRandomGeneratorMockRecorder is the mock recorder for MockSecureRandomGenerator.
type MockSecureRandomGeneratorMockRecorder struct {
	mock *MockSecureRandomGenerator
}

// NewMockSecureRandomGenerator creates a new mock instance.
func NewMockSecureRandomGenerator(ctrl *gomock.Controller) *MockSecureRandomGenerator {
	mock := &MockSecureRandomGenerator{ctrl: ctrl}
	mock.recorder = &MockSecureRandomGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecureRandomGenerator) EXPECT() *MockSecureRandomGeneratorMockRecorder {
	return m.recorder
}

// Hex mocks base method.
func (m *MockSecureRandomGenerator) Hex() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hex")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hex indicates an expected call of Hex.
func (mr *MockSecureRandomGeneratorMockRecorder) Hex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hex", reflect.TypeOf((*MockSecureRandomGenerator)(nil).Hex))
}

// UUID mocks base method.
func (m *MockSecureRandomGenerator) UUID() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UUID indicates an expected call of UUID.
func (mr *MockSecureRandomGeneratorMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockSecureRandomGenerator)(nil).UUID))
}
